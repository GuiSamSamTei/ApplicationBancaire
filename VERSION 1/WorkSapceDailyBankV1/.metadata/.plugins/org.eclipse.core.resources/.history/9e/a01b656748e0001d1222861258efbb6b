package memory.view;

import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import memory.om.Jeu;
import memory.om.Reponse;

public class JeuMemoryHuitQuatreController implements Initializable {

	@FXML
	private Button butCaseZero;
	@FXML
	private Button butCaseUn;
	@FXML
	private Button butCaseDeux;
	@FXML
	private Button butCaseTrois;
	@FXML
	private Button butCaseQuatre;
	@FXML
	private Button butCaseCinq;
	@FXML
	private Button butCaseSix;
	@FXML
	private Button butCaseSept;
	@FXML
	private Button butCaseHuit;
	@FXML
	private Button butCaseNeuf;
	@FXML
	private Button butCaseDix;
	@FXML
	private Button butCaseOnze;
	@FXML
	private Button butCaseDouze;
	@FXML
	private Button butCaseTreize;
	@FXML
	private Button butCaseQuatorze;
	@FXML
	private Button butCaseQuinze;
	@FXML
	private Button butCaseSeize;
	@FXML
	private Button butCaseDixsept;
	@FXML
	private Button butCaseDixhuit;
	@FXML
	private Button butCaseDixneuf;
	@FXML
	private Button butCaseVingt;
	@FXML
	private Button butCaseVingtun;
	@FXML
	private Button butCaseVingtdeux;
	@FXML
	private Button butCaseVingttrois;
	@FXML
	private Button butCaseVingtquatre;
	@FXML
	private Button butCaseVingtcinq;
	@FXML
	private Button butCaseVingtsix;
	@FXML
	private Button butCaseVingtsept;
	@FXML
	private Button butCaseVingthuit;
	@FXML
	private Button butCaseVingtneuf;
	@FXML
	private Button butCaseTrente;
	@FXML
	private Button butCaseTrenteun;

	@FXML
	private Label labelScoreUn = new Label("Score :");
	@FXML
	private Label labelScoreDeux = new Label("0");

	private int valScore;

	private Jeu jeuMemory;

	private Button butPremierSelect = null;
	private Button butSecondSelect = null;

	private Stage stageJeu;

	public void setJeuMode(Stage fenetrePrincipale, boolean mode) {
		this.stageJeu = fenetrePrincipale;
		this.stageJeu.setOnCloseRequest(event -> {
			event.consume();
			actionQuitter();
		});
		this.jeuMemory = new Jeu(16, mode);
		this.valScore = 0;
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		this.butCaseZero.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseUn.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseDeux.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseTrois.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseQuatre.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseCinq.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseSix.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseSept.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseHuit.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseNeuf.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseDix.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseOnze.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseDouze.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseTreize.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseQuatorze.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseQuinze.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseSeize.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseDixsept.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseDixhuit.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseDixneuf.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingt.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingtun.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingtdeux.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingttrois.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingtquatre.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingtcinq.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingtsix.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingtsept.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingthuit.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseVingtneuf.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseTrente.setOnMouseClicked(e -> actionCarte(e));
		this.butCaseTrenteun.setOnMouseClicked(e -> actionCarte(e));
	}

	private void actionCarte(MouseEvent event) {
		Reponse choixCarte;
		if (event.getSource() == this.butCaseZero) {
			choixCarte = this.jeuMemory.jouer(0);
			this.butCaseZero.setText("" + this.jeuMemory.getCarteValeur(0));
			this.butCaseZero.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseZero);
		} else if (event.getSource() == this.butCaseUn) {
			choixCarte = this.jeuMemory.jouer(1);
			this.butCaseUn.setText("" + this.jeuMemory.getCarteValeur(1));
			this.butCaseUn.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseUn);
		} else if (event.getSource() == this.butCaseDeux) {
			choixCarte = this.jeuMemory.jouer(2);
			this.butCaseDeux.setText("" + this.jeuMemory.getCarteValeur(2));
			this.butCaseDeux.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseDeux);
		} else if (event.getSource() == this.butCaseTrois) {
			choixCarte = this.jeuMemory.jouer(3);
			this.butCaseTrois.setText("" + this.jeuMemory.getCarteValeur(3));
			this.butCaseTrois.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseTrois);
		} else if (event.getSource() == this.butCaseQuatre) {
			choixCarte = this.jeuMemory.jouer(4);
			this.butCaseQuatre.setText("" + this.jeuMemory.getCarteValeur(4));
			this.butCaseQuatre.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseQuatre);
		} else if (event.getSource() == this.butCaseCinq) {
			choixCarte = this.jeuMemory.jouer(5);
			this.butCaseCinq.setText("" + this.jeuMemory.getCarteValeur(5));
			this.butCaseCinq.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseCinq);
		} else if (event.getSource() == this.butCaseSix) {
			choixCarte = this.jeuMemory.jouer(6);
			this.butCaseSix.setText("" + this.jeuMemory.getCarteValeur(6));
			this.butCaseSix.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseSix);
		} else if (event.getSource() == this.butCaseSept) {
			choixCarte = this.jeuMemory.jouer(7);
			this.butCaseSept.setText("" + this.jeuMemory.getCarteValeur(7));
			this.butCaseSept.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseSept);
		} else if (event.getSource() == this.butCaseHuit) {
			choixCarte = this.jeuMemory.jouer(8);
			this.butCaseHuit.setText("" + this.jeuMemory.getCarteValeur(8));
			this.butCaseHuit.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseHuit);
		} else if (event.getSource() == this.butCaseNeuf) {
			choixCarte = this.jeuMemory.jouer(9);
			this.butCaseNeuf.setText("" + this.jeuMemory.getCarteValeur(9));
			this.butCaseNeuf.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseNeuf);
		} else if (event.getSource() == this.butCaseDix) {
			choixCarte = this.jeuMemory.jouer(10);
			this.butCaseDix.setText("" + this.jeuMemory.getCarteValeur(10));
			this.butCaseDix.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseDix);
		} else if (event.getSource() == this.butCaseOnze) {
			choixCarte = this.jeuMemory.jouer(11);
			this.butCaseOnze.setText("" + this.jeuMemory.getCarteValeur(11));
			this.butCaseOnze.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseOnze);
		} else if (event.getSource() == this.butCaseDouze) {
			choixCarte = this.jeuMemory.jouer(12);
			this.butCaseDouze.setText("" + this.jeuMemory.getCarteValeur(12));
			this.butCaseDouze.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseDouze);
		} else if (event.getSource() == this.butCaseTreize) {
			choixCarte = this.jeuMemory.jouer(13);
			this.butCaseTreize.setText("" + this.jeuMemory.getCarteValeur(13));
			this.butCaseTreize.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseTreize);
		} else if (event.getSource() == this.butCaseQuatorze) {
			choixCarte = this.jeuMemory.jouer(14);
			this.butCaseQuatorze.setText("" + this.jeuMemory.getCarteValeur(14));
			this.butCaseQuatorze.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseQuatorze);
		} else if (event.getSource() == this.butCaseQuinze) {
			choixCarte = this.jeuMemory.jouer(15);
			this.butCaseQuinze.setText("" + this.jeuMemory.getCarteValeur(15));
			this.butCaseQuinze.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseQuinze);
		} else if (event.getSource() == this.butCaseSeize) {
			choixCarte = this.jeuMemory.jouer(16);
			this.butCaseSeize.setText("" + this.jeuMemory.getCarteValeur(16));
			this.butCaseSeize.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseSeize);
		} else if (event.getSource() == this.butCaseDixsept) {
			choixCarte = this.jeuMemory.jouer(17);
			this.butCaseDixsept.setText("" + this.jeuMemory.getCarteValeur(17));
			this.butCaseDixsept.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseDixsept);
		} else if (event.getSource() == this.butCaseDixhuit) {
			choixCarte = this.jeuMemory.jouer(18);
			this.butCaseDixhuit.setText("" + this.jeuMemory.getCarteValeur(18));
			this.butCaseDixhuit.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseDixhuit);
		} else if (event.getSource() == this.butCaseDixneuf) {
			choixCarte = this.jeuMemory.jouer(19);
			this.butCaseDixneuf.setText("" + this.jeuMemory.getCarteValeur(19));
			this.butCaseDixneuf.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseDixneuf);
		} else if (event.getSource() == this.butCaseVingt) {
			choixCarte = this.jeuMemory.jouer(20);
			this.butCaseVingt.setText("" + this.jeuMemory.getCarteValeur(20));
			this.butCaseVingt.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingt);
		} else if (event.getSource() == this.butCaseVingtun) {
			choixCarte = this.jeuMemory.jouer(21);
			this.butCaseVingtun.setText("" + this.jeuMemory.getCarteValeur(21));
			this.butCaseVingtun.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingtun);
		} else if (event.getSource() == this.butCaseVingtdeux) {
			choixCarte = this.jeuMemory.jouer(22);
			this.butCaseVingtdeux.setText("" + this.jeuMemory.getCarteValeur(22));
			this.butCaseVingtdeux.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingtdeux);
		} else if (event.getSource() == this.butCaseVingttrois) {
			choixCarte = this.jeuMemory.jouer(23);
			this.butCaseVingttrois.setText("" + this.jeuMemory.getCarteValeur(23));
			this.butCaseVingttrois.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingttrois);
		} else if (event.getSource() == this.butCaseVingtquatre) {
			choixCarte = this.jeuMemory.jouer(24);
			this.butCaseVingtquatre.setText("" + this.jeuMemory.getCarteValeur(24));
			this.butCaseVingtquatre.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingtquatre);
		} else if (event.getSource() == this.butCaseVingtcinq) {
			choixCarte = this.jeuMemory.jouer(25);
			this.butCaseVingtcinq.setText("" + this.jeuMemory.getCarteValeur(25));
			this.butCaseVingtcinq.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingtcinq);
		} else if (event.getSource() == this.butCaseVingtsix) {
			choixCarte = this.jeuMemory.jouer(26);
			this.butCaseVingtsix.setText("" + this.jeuMemory.getCarteValeur(26));
			this.butCaseVingtsix.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingtsix);
		} else if (event.getSource() == this.butCaseVingtsept) {
			choixCarte = this.jeuMemory.jouer(27);
			this.butCaseVingtsept.setText("" + this.jeuMemory.getCarteValeur(27));
			this.butCaseVingtsept.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingtsept);
		} else if (event.getSource() == this.butCaseVingthuit) {
			choixCarte = this.jeuMemory.jouer(28);
			this.butCaseVingthuit.setText("" + this.jeuMemory.getCarteValeur(28));
			this.butCaseVingthuit.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingthuit);
		} else if (event.getSource() == this.butCaseVingtneuf) {
			choixCarte = this.jeuMemory.jouer(29);
			this.butCaseVingtneuf.setText("" + this.jeuMemory.getCarteValeur(29));
			this.butCaseVingtneuf.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseVingtneuf);
		} else if (event.getSource() == this.butCaseTrente) {
			choixCarte = this.jeuMemory.jouer(30);
			this.butCaseTrente.setText("" + this.jeuMemory.getCarteValeur(30));
			this.butCaseTrente.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseTrente);
		} else if (event.getSource() == this.butCaseTrenteun) {
			choixCarte = this.jeuMemory.jouer(31);
			this.butCaseTrenteun.setText("" + this.jeuMemory.getCarteValeur(31));
			this.butCaseTrenteun.setDisable(true);
			effectuerCoup(choixCarte, this.butCaseTrenteun);
		}
	}

	private void effectuerCoup(Reponse rep, Button but) {
		if (rep == Reponse.PREMIERE) {
			this.butPremierSelect = but;
		} else if (rep == Reponse.GAGNE) {
			System.out.println("Point gagner");
			this.butPremierSelect = null;
			this.butSecondSelect = null;
			this.valScore++;
			this.labelScoreDeux.setText("" + this.valScore);
		} else if (rep == Reponse.PERDU) {
			this.butSecondSelect = but;
			attendre(500, () -> {
				this.butPremierSelect.setText("");
				this.butPremierSelect.setDisable(false);
				this.butSecondSelect.setText("");
				this.butSecondSelect.setDisable(false);
				this.valScore++;
				this.labelScoreDeux.setText("" + this.valScore);
			});
		} else {
			System.out.println("Erreur sur les cartes");
		}

		if (this.jeuMemory.isPartieTerminee()) {
			this.labelScoreDeux.setText("");
			this.labelScoreUn.setText("Vous avec terminez en " + this.valScore + " coups !!");
		}
	}

	private void actionQuitter() {
		if (!this.jeuMemory.isPartieTerminee()) {
			Alert confirmation = new Alert(AlertType.CONFIRMATION);
			confirmation.setTitle("Fermeture du jeu en cours");
			confirmation.setHeaderText("Voulez-vous réellement quitter la partie en cours ?");
			confirmation.initOwner(this.stageJeu);

			confirmation.getButtonTypes().setAll(ButtonType.YES, ButtonType.NO);

			Optional<ButtonType> reponse = confirmation.showAndWait();

			if (reponse.isPresent()) {
				if (reponse.get() == ButtonType.YES) {
					this.stageJeu.close();
				}
			}
		} else {
			this.stageJeu.close();
		}
	}

	public static void attendre(int temps, Runnable suite) {
		Task<Void> stopit = new Task<Void>() {
			@Override
			protected Void call() throws Exception {
				try {
					Thread.sleep(temps);
				} catch (InterruptedException e) {
				}
				return null;
			}
		};
		stopit.setOnSucceeded(event -> suite.run());
		new Thread(stopit).start();
	}
}